//end of user.js
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        //var user_data = {
        //  Points : Points+1
        //}
        //database_ref.child('users/' + user.uid).update(user_data)
        
        // ...
      } else {
        // User is signed out
        // ...
      }
    });
  });
    /*
    navigator.geolocation.getCurrentPosition((position) => {
    const pos = {
      lat: position.coords.latitude,
      lng: position.coords.longitude,
    };
    for (let i = 0; i < bins.length; i++){
      const bin = bins[i];
      if(lat == bins[1] && lng == bins[2]){
        var user_data = {
          Points : Points+1
        }
        var database_ref = database.ref()
        //database_ref.child('users/' + user.uid).update(user_data)
      }
    }
    },
    );
    */
    End of login.js 6/27
    /*
//FIREBASE DATABASE AUTHENTICATION
// Import the functions you need from the SDKs you need
import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.0.0/firebase-app.js';
import { getAuth } from 'https://www.gstatic.com/firebasejs/9.0.0/firebase-auth.js';
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyAFvVTARYzQrWvE9OXCTY3JV3o9SxHbJ7U",
  authDomain: "mean-green-deal-726f9.firebaseapp.com",
  projectId: "mean-green-deal-726f9",
  storageBucket: "mean-green-deal-726f9.appspot.com",
  messagingSenderId: "747867835951",
  appId: "1:747867835951:web:084db4a1feb703eafe00da",
  measurementId: "G-2QKNB5QXF4"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth();

onAuthStateChanged(auth, user => {
    if(user != null){
        console.log('logged in!');
    }else{
        console.log('No user');
    }
});
*/
End of login.js 6/27
   //Tutorial's login method.
/*
    loginForm.addEventListener("submit", e=> {
        e.preventDefault();

        // Perform your AJAX/Fetch login

        setFormMessage(loginForm, "error", "Invalid username/password combination");
    });

    document.querySelectorAll(".form__input").forEach(inputElement => {
        inputElement.addEventListener("blur", e => {
            if (e.target.id == "newUser" && e.target.value.length > 0 && e.target.value.length < 4) {
                setInputError(inputElement, "Username must be at least 4 characters in length");
            }
        });

        inputElement.addEventListener("input", e => {
            clearInputError(inputElement);
        })
    });
    */
    Middle of login.js 6/27
    /*
  for (i = 0; i <LoginInfo.length; i++){
      if(registerUser==LoginInfo[i].username){
          alert("That username is already in use, choose another")
          return
      }
  }
  for (i = 0; i <LoginInfo.length; i++){
      if(registerEmail==LoginInfo[i].email){
          alert("That email is already in use, choose another")
          return
      }
  }
  if (registerPassword == registerConfirmPassword)
  {
      var newUser = {
          username: registerUser,
          email: registerEmail
      }
      LoginInfo.push(newUser)
      alert("Your Account has been created!")

      location.href = 'https://mean-green-deal.github.io/';
      return
  }
  else{
      alert("Passwords do not match. Try again")
      return
  }
*/
//Middle of login.js
  ///////////////////////////////Valid Credentials ///////////////////////////////////////////
  //More tests for username, email and password
  /*
  if (registerUser.length < 3) return alert("That username is too short.");
  
  else if (registerEmail.length < 3) return alert("That email is too short.");
  
  else if(emailRegex(registerEmail) == false) return alert("Invalid email.");
  
  else if (registerPassword.length < 3) return alert("That password is too short.");
  */
  //////////////////////OLD MAP.JS CODE////////////////////////////
  let map, infoWindow
let infoWindows = []
let binDirections = []


function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
      center: { lat: 33.20750461273979, lng: -97.15295817275108 },
      zoom: 15,
      mapid: '576037077fe48406',
      mapTypeControl: false,
      fullscreenControl: false,
      streetViewControl: false,
      styles: [
        { 
          "featureType": "poi", 
          "stylers": [ 
            { "visibility": "off" } 
          ] 
        }
      ]
    });
    google.maps.event.addDomListener(window, "resize", function() {
      var center = map.getCenter();
      google.maps.event.trigger(map, "resize");
      map.setCenter(center); 
    });
   const bins = [
      ["Recycling Bin DP Out 1", 33.2555149, -97.1529043],
      ["Recycling Bin DP OUT 2", 33.2548833, -97.1533700],
      ["Recycling Bin DP IN 3", 33.2543800, -97.1536788],
      ["Recycling Bin DP IN 4", 33.2546405, -97.1535286],
      ["Recycling Bin DP IN 5", 33.2541964, -97.1537884],
      ["Recycling Bin DP OUT 6", 33.2540419, -97.1528614],
      ["Recycling Bin DP IN 7", 33.2530084, -97.1520399],
      ["Recycling Bin DP IN 8", 33.2532607, -97.1524144],
      ["Recycling Bin DP IN 9", 33.2531654, -97.1528657],
      ["Recycling Bin DP IN 10", 33.2532955, -97.1527598],
      ["Recycling Bin DP IN 11", 33.2543783, -97.1526464],
      ["Recycling Bin DP IN 12", 33.2540410, -97.1524346],
      ["Recycling Bin DP OUT 13", 33.2533861, -97.1506733],
      ["Recycling Bin BB-1 IN 1", 33.2090314, -97.1477843],
      ["Recycling Bin BB-1 IN 2", 33.2089731, -97.1480699],
      ["Recycling Bin BB1 IN 3", 33.2088620, -97.1480615],
      ["Recycling Bin BB Out 4", 33.2085500, -97.1476441],
      ["Recycling Bin BB Out 5", 33.2082095, -97.1482242],
      ["Recycling Bin BB Out 6", 33.2088137, -97.1483073],
      ["Recycling Bin BB Out 7", 33.2090435, -97.1482168],
      ["Recycling Bin BB Out 8", 33.2091924, -97.1463922],
      ["Recycling Bin BB Out 9", 33.2089456, -97.1470882],
      ["UN Out 1", 33.2097871, -97.1476220],
      ["UN Out 2", 33.2097882, -97.1474946],
      ["IDK 1", 33.2100766, -97.1473856],
      ["IDK 2", 33.2101372, -97.1473789],
      ["IDK 3", 33.2102825, -97.1473910],
      ["IDK 4", 33.2109417, -97.1473789],
      ["IDK 5", 33.2106071, -97.1483824],
      ["MC Out 1", 33.2127530, -97.1485339],
      ["Bahsen out 1", 33.2101027, -97.1529643],
      ["Tennis courts 1", 33.2095843, -97.1542075],
      ["Wooten Out 1", 33.2103782, -97.1452449],
      ["Union out 1", 33.2103397, -97.1463228],
      ["IDK 2", 33.2104486, -97.1486342],
      ["IDK 3", 33.2113588, -97.1476153],
      ["IDK 4", 33.2114250, -97.1477756],
      ["IDK 5", 33.2119322, -97.1484585],
      ["MC Out 1", 33.2117142, -97.1474624],
      ["Bahsen out 1", 33.2112194, -97.1464754],
      ["Tennis courts 1", 33.2116943, -97.1499391],
      ["Wooten Out 1", 33.2114640, -97.1509385],
      ["Union out 1", 33.2114870, -97.1528060],
    ];
   
    for (let i = 0; i < bins.length; i++) {
      const bin = bins[i];
  
      const marker = new google.maps.Marker({
        position: { lat: bin[1], lng: bin[2] },
        map,
        icon: {
          url: "pictures/recycling bin.png",
          scaledSize: new google.maps.Size(28.5, 23.25) 
        },
        title: bin[0],
      });
        
        const infoWindow = new google.maps.InfoWindow({
        content: bin[0],
        });
    
        infoWindows.push(infoWindow);
        
        marker.addListener("click", () => {
            let directionsService = new google.maps.DirectionsService();
            let directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                preserveViewport: true
            });
            var endLocation =  new google.maps.LatLng(bin[1], bin[2]);
            var startLocation;
            
            binDirections.push(directionsRenderer);
            binDirections.forEach((dr) => {
                dr.setMap(null);
            });
         
            
            
            navigator.geolocation.getCurrentPosition(
                (position) => {
                       startLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                    
                const request = {
                        origin: startLocation,
                        destination: endLocation,
                        travelMode: google.maps.TravelMode.WALKING,
                };

                directionsService.route(request, (result, status) => {
                    if (status == google.maps.DirectionsStatus.OK) {
                        directionsRenderer.setDirections(result);
                        directionsRenderer.setMap(map);
                    }
                });
            },
            () => {
                handleLocationError(true, infoWindow, map.getCenter());
              }
            );
            
            infoWindows.forEach((iw) => {
                iw.close();
            });
            
            infoWindow.open(map, marker);
            binDirections.push(directionsRenderer);
           
        });    
      }
      const marker = new google.maps.Marker({
        position: { lat: 33.214311, lng: 33.214311, },
        map,
        icon: {
          url: "pictures/Original recycling bin.png",
          scaledSize: new google.maps.Size(28.5, 23.25) 
        },
        title: "OG Bin",
      });
    /*
    // Create the DIV to hold the control.
    const centerControlDiv = document.createElement("div");
    // Create the control.
    const centerControl = createCenterControl(map);

    // Append the control to the DIV.
    centerControlDiv.appendChild(centerControl);
    map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(centerControlDiv);
    */
  }

function getLocation() {
    //infoWindow = new google.maps.InfoWindow();
    /*
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const  location = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          map.setCenter(location);
        },
        () => {
          handleLocationError(true, infoWindow, map.getCenter());
        }
      );
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
    */
    const marker = new google.maps.Marker({
    map: map,
    icon: {
      url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
    }
  });

  // Create a new circle to represent the user's location accuracy
  const circle = new google.maps.Circle({
    map: map,
    fillColor: "#0088ff",
    fillOpacity: 0.1,
    strokeColor: "#0088ff",
    strokeOpacity: 0.5,
    strokeWeight: 1
  });

  if (navigator.geolocation) {
    navigator.geolocation.watchPosition(
      (position) => {
        const location = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        // Update the marker and circle positions
        marker.setPosition(location);
        circle.setCenter(location);
        circle.setRadius(position.coords.accuracy);

        map.setCenter(location);
      },
      () => {
        handleLocationError(true, infoWindow, map.getCenter());
      },
        {
        enableHighAccuracy: true, // setting high accuracy
        maximumAge: 0, // forcing the service to get fresh location
        timeout: 5000 // timeout after 5 seconds
      }
    );
  } else {
    // Browser doesn't support Geolocation
    handleLocationError(false, infoWindow, map.getCenter());
  }
}

  function handleLocationError(browserHasGeolocation, infoWindow, location) {
  infoWindow.setPosition(location);
  infoWindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation."
  );
  infoWindow.open(map);
}

//copying sams header
const toggleButton = document.getElementsByClassName('toggle-button')[0]
const navbarLinks = document.getElementsByClassName('navbar-links')[0]

toggleButton.addEventListener('click', () => {
    navbarLinks.classList.toggle('active')
})
//end of copying sams header

window.onload = getLocation;
window.initMap = initMap;
  //svg image url: https://www.recycling.com/wp-content/uploads/2016/06/recycling-symbol-icon-solid-dark-blue.png
  //33.20750461273979, -97.15295817275108

  //const domContainer = document.querySelector('#like_button_container');
//const root = ReactDOM.createRoot(domContainer);
//root.render(e(LikeButton));
  //svg image url: https://www.recycling.com/wp-content/uploads/2016/06/recycling-symbol-icon-solid-dark-blue.png
  //33.20750461273979, -97.15295817275108

/////////////////Geo Location at user.js error handeling///////////////////
 function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation."
  );
  infoWindow.open(map);
}
